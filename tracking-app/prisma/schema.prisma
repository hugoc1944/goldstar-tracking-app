generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  nif       String?
  address   String?
  createdAt DateTime @default(now())
  city      String?
  postal    String?
  orders    Order[]
}

model Order {
  id             String        @id @default(uuid())
  customerId     String
  status         OrderStatus   @default(PREPARACAO)
  eta            DateTime?
  trackingNumber String?
  publicToken    String        @unique
  createdAt      DateTime      @default(now())
  filesJson      Json?
  messages       Message[]
  customer       Customer      @relation(fields: [customerId], references: [id])
  items          OrderItem[]
  events         StatusEvent[]

  deliveryType   String?
  housingType    String?
  floorNumber    Int?
  hasElevator    Boolean?

  confirmedAt          DateTime?        // null until client confirms
  createdFromBudget Budget? @relation(name: "BudgetToOrder")

  @@index([status])
  @@index([publicToken])
}

model OrderItem {
  id             String   @id @default(uuid())
  orderId        String
  sku            String?
  model          String?
  description    String
  quantity       Int      @default(1)
  technicalFile  String?
  complements    String?
  customizations Json?
  attachmentsRef String?
  createdAt      DateTime @default(now())
  order          Order    @relation(fields: [orderId], references: [id])
}

model StatusEvent {
  id        String       @id @default(uuid())
  orderId   String
  from      OrderStatus?
  to        OrderStatus
  byAdminId String
  note      String?
  at        DateTime     @default(now())
  order     Order        @relation(fields: [orderId], references: [id])

  @@index([orderId, at])
}

model Message {
  id         String     @id @default(uuid())
  orderId    String
  authorType AuthorType
  body       String
  createdAt  DateTime   @default(now())
  order      Order      @relation(fields: [orderId], references: [id])

  @@index([orderId, createdAt])
}

model AdminUser {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         String   @default("admin")
  createdAt    DateTime @default(now())
}

model CatalogOption {
  id       String       @id @default(cuid())
  group    CatalogGroup
  category String?
  value    String
  label    String
  order    Int          @default(0)
  active   Boolean      @default(true)

  @@unique([group, value])
}

model Budget {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  name              String
  email             String
  phone             String?
  nif               String?
  address           String
  postalCode        String
  city              String
  modelKey          String
  handleKey         String?
  finishKey         String
  barColor          String?
  glassTypeKey      String
  acrylicKey        String?
  serigrafiaKey     String?
  serigrafiaColor   String?
  complemento       String
  visionSupport     String?
  visionBar         String?
  towelColorMode    String?
  cornerChoice      String?
  cornerColorMode   String?
  fixingBarMode    String?
  shelfColorMode   String?
  widthMm           Int?
  heightMm          Int?
  depthMm           Int?
  willSendLater     Boolean   @default(false)
  deliveryType      String
  housingType       String?
  floorNumber       Int?
  hasElevator       Boolean?
  photoUrls         Json?
  priceCents        Int?
  installPriceCents Int?
  notes             String?
  quotedPdfUrl      String?
  deletedAt         DateTime?

  sentAt           DateTime?          // set when email is sent
  confirmedAt      DateTime?          // set when client confirms
  convertedOrderId String?            @unique
  convertedOrder   Order?   @relation(name: "BudgetToOrder", fields: [convertedOrderId], references: [id])
  @@index([createdAt])
  @@index([email])
}

model ModelRule {
  id                  String   @id @default(cuid())
  modelKey            String   @unique
  hideHandles         Boolean  @default(false)
  removeFinishes      String[]
  allowAcrylicAndPoly Boolean  @default(false)
  allowTowel1         Boolean  @default(false)
  hasFixingBar       Boolean  @default(false)
}

enum OrderStatus {
  PREPARACAO
  PRODUCAO
  EXPEDICAO
  ENTREGUE
}

enum AuthorType {
  ADMIN
  CLIENTE
}

enum CatalogGroup {
  MODEL
  HANDLE
  FINISH
  ACRYLIC
  SERIGRAPHY
  FINISH_METALICO
  FINISH_LACADO
  GLASS_TIPO
  MONOCROMATICO
  ACRYLIC_AND_POLICARBONATE
  SERIGRAFIA_PRIME
  SERIGRAFIA_QUADROS
  SERIGRAFIA_ELO_SERENO
  COMPLEMENTO
  VISION_BAR_COLOR
}
